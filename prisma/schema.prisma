generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model catalogue {
  quantite              Int?
  id                    Int       @id @default(autoincrement())
  dateApprovisionnement DateTime? @db.Date
  updatedAt             DateTime  @updatedAt
  produitId             Int?
  produit               produit?  @relation(fields: [produitId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_produit")

  @@index([produitId], map: "fk_produit_idx")
}

model categorieproduit {
  nom      String?   @db.VarChar(1000)
  id       Int       @id @default(autoincrement())
  photoURL String?   @db.VarChar(1000)
  produit  produit[]
}

model client {
  numero   String?   @db.VarChar(45)
  motPasse String?   @db.VarChar(45)
  id       Int       @id @default(autoincrement())
  nom      String?   @db.VarChar(45)
  prenom   String?   @db.VarChar(45)
  pannier  pannier[]
}

model ligneproduit {
  prix          Int?
  quantite      Int?
  id            Int          @id @default(autoincrement())
  pannierId     Int?
  produitId     Int?
  packproduitId Int?
  packproduit   packproduit? @relation(fields: [packproduitId], references: [id], map: "packproduitId")
  pannier       pannier?     @relation(fields: [pannierId], references: [id], onUpdate: NoAction, map: "pannierId")
  produit       produit?     @relation(fields: [produitId], references: [id], onUpdate: NoAction, map: "produitId")

  @@index([packproduitId], map: "idPack_idx")
  @@index([pannierId], map: "idPannier_idx")
  @@index([produitId], map: "idProduit_idx")
}

model packproduit {
  prix         Int?
  description  String?        @db.VarChar(1000)
  photoURL     String?        @db.VarChar(1000)
  id           Int            @id @default(autoincrement())
  nom          String?        @db.VarChar(45)
  ligneproduit ligneproduit[]
}

model pannier {
  prix             Float
  date             DateTime        @default(now())
  moyenPaiement    String          @db.VarChar(45)
  statut           String?         @db.VarChar(45)
  id               Int             @id @default(autoincrement())
  clientId         Int?
  pointramassageId Int?
  client           client?         @relation(fields: [clientId], references: [id], onUpdate: NoAction, map: "clientId")
  pointramassage   pointramassage? @relation(fields: [pointramassageId], references: [id], onUpdate: NoAction, map: "pointramassageId")
  ligneproduit     ligneproduit[]

  @@index([clientId], map: "idClient_idx")
  @@index([pointramassageId], map: "idPointRamassage_idx")
}

model pointramassage {
  nom       String?   @db.VarChar(45)
  latitude  Float?
  longitude Float?
  id        Int       @id @default(autoincrement())
  pannier   pannier[]
}

model producteur {
  numero                 String?                  @db.VarChar(45)
  motPasse               String?                  @db.VarChar(45)
  latitude               Float?
  id                     Int                      @id @default(autoincrement())
  nom                    String?                  @db.VarChar(45)
  prenom                 String?                  @db.VarChar(45)
  preinscriptionValide   String?                  @default("en attente") @db.VarChar(45)
  longitude              Float?
  nomStructure           String?                  @db.VarChar(45)
  producteur_has_produit producteur_has_produit[]
  proposition            proposition[]
}

model producteur_has_produit {
  producteurId    Int        @default(autoincrement())
  produitId       Int
  conditionnement String?    @db.VarChar(45)
  producteur      producteur @relation(fields: [producteurId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Producteur_has_Produit_Producteur1")
  produit         produit    @relation(fields: [produitId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Producteur_has_Produit_Produit1")

  @@id([producteurId, produitId])
  @@index([producteurId], map: "fk_Producteur_has_Produit_Producteur1_idx")
  @@index([produitId], map: "fk_Producteur_has_Produit_Produit1_idx")
}

model produit {
  nom                    String?                  @db.VarChar(45)
  prix                   Int?
  photoURL               String?                  @db.VarChar(1000)
  description            String?                  @db.VarChar(1000)
  id                     Int                      @id @default(autoincrement())
  categorieproduitId     Int?
  statut                 String?                  @db.VarChar(1000)
  categorieproduit       categorieproduit?        @relation(fields: [categorieproduitId], references: [id], onUpdate: NoAction, map: "fk_Produit_CategorieProduit1")
  catalogue              catalogue[]
  ligneproduit           ligneproduit[]
  producteur_has_produit producteur_has_produit[]

  @@index([categorieproduitId], map: "fk_Produit_CategorieProduit1_idx")
}

model ropert {
  nom      String? @db.VarChar(45)
  motPasse String? @db.VarChar(1000)
  prenom   String? @db.VarChar(45)
  id       Int     @id @default(autoincrement())
  email    String? @db.VarChar(45)
}

model admin {
  nom      String? @db.VarChar(45)
  prenom   String? @db.VarChar(45)
  motPasse String? @db.VarChar(1000)
  id       Int     @id @default(autoincrement())
  email    String? @db.VarChar(45)
}

model photo {
  idphoto        Int         @default(autoincrement())
  photoURL       String?     @db.VarChar(1000)
  proposition_id Int
  proposition    proposition @relation(fields: [proposition_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_photo_proposition1")

  @@id([idphoto, proposition_id])
  @@index([proposition_id], map: "fk_photo_proposition1_idx")
}

model proposition {
  id                Int         @id @default(autoincrement())
  nomProduit        String?     @db.VarChar(45)
  prix              Float?      @db.Float
  periodiciteAnnuel String?     @db.VarChar(45)
  producteurId      Int?
  conditionnement   String?     @db.VarChar(45)
  saisonnier        String?     @db.VarChar(45)
  statut            String?     @db.VarChar(45)
  date              DateTime?
  producteur        producteur? @relation(fields: [producteurId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_proposition_producteur1")
  photo             photo[]

  @@index([producteurId], map: "fk_proposition_producteur1_idx")
}
